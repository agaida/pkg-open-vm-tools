--- a/lib/include/vmblock.h
+++ b/lib/include/vmblock.h
@@ -76,7 +76,7 @@
  *   VMBLOCK_DEL_FILEBLOCK
  *   VMBLOCK_LIST_FILEBLOCKS
  *
- *   path should be something in /tmp/VMwareDnD/ rather than in
+ *   path should be something in /run/VMwareDnD/ rather than in
  *   VMBLOCK_MOUNT_POINT.
  *
  *   VMBLOCK_CONTROL returns 0 on success or returns -1 and sets errno on
--- a/modules/freebsd/vmblock/vfsops.c
+++ b/modules/freebsd/vmblock/vfsops.c
@@ -152,8 +152,8 @@ VMBlockVFSMount(struct mount *mp,
 
    /*
     * Look up path to lower layer (VMBlock source / DnD staging area).
-    * (E.g., in the command "mount /tmp/VMwareDnD /var/run/vmblock",
-    * /tmp/VMwareDnD is the staging area.)
+    * (E.g., in the command "mount /run/VMwareDnD /var/run/vmblock",
+    * /run/VMwareDnD is the staging area.)
     */
    error = vfs_getopt(mp->mnt_optnew, "target", (void **)&target, &len);
    if (error || target[len - 1] != '\0') {
--- a/modules/linux/vmblock/linux/module.c
+++ b/modules/linux/vmblock/linux/module.c
@@ -40,7 +40,7 @@ MODULE_PARM_DESC(LOGLEVEL_THRESHOLD, "Lo
                  "10 means very verbose, 4 is default)");
 #endif /* } */
 
-static char *root = "/tmp/VMwareDnD";
+static char *root = "/run/VMwareDnD";
 module_param(root, charp, 0600);
 MODULE_PARM_DESC(root, "The directory the file system redirects to.");
 
--- a/services/plugins/dndcp/dnd/dndLinux.c
+++ b/services/plugins/dndcp/dnd/dndLinux.c
@@ -83,7 +83,7 @@
 ConstUnicode
 DnD_GetFileRoot(void)
 {
-   return "/tmp/VMwareDnD/";
+   return "/run/VMwareDnD/";
 }
 
 
--- a/tests/testVmblock/vmblocktest.c
+++ b/tests/testVmblock/vmblocktest.c
@@ -50,7 +50,7 @@
 
 #define CONTROLFILE               VMBLOCK_DEVICE
 #define CONTROLFILE_MODE          VMBLOCK_DEVICE_MODE
-#define REALROOT                   "/tmp/VMwareDnD/"
+#define REALROOT                   "/run/VMwareDnD/"
 #define FILENAME                   "/foo"
 #define ACCESSORFULLNAME(dir)      VMBLOCK_FS_ROOT "/" dir FILENAME
 #define BLOCKERFULLNAME(dir)       REALROOT dir
--- a/vmblock-fuse/design.txt
+++ b/vmblock-fuse/design.txt
@@ -4,7 +4,7 @@
 
 Filesystem User Interface
 -------------------------
-Reexports /tmp/VMwareDnD. I'll call this the target directory.
+Reexports /run/VMwareDnD. I'll call this the target directory.
 
 Mount point will contain:
     * /blockdir/
@@ -19,7 +19,7 @@ It's just a special directory within the
 /dev - Control file. Control operations happen by opening this file and doing a write on
 it. The data that we write is a character representing the operation to be done,
 sometimes followed by the path of the file to be blocked or unblocked (its original path,
-eg: "/tmp/VMwareDnD/foo/bar"). The count argument to write must be the length of the
+eg: "/run/VMwareDnD/foo/bar"). The count argument to write must be the length of the
 string. This will be the length of the path + 1 for the operation character.
 
 COMMAND                        OPERATION CHARACTER    EXAMPLE
@@ -52,7 +52,7 @@ IMPORTANT: Please read the deadlock sect
 
 I'm using the common blocking code that the rest of the vmblock implementations share. It
 stores blocks as a linked list of structs which contain the direct path of the file being
-blocked (eg: "/tmp/VMwareDnD/foo/bar"), variables to link it into the list, an id of the
+blocked (eg: "/run/VMwareDnD/foo/bar"), variables to link it into the list, an id of the
 control file which caused the block, a completion/condition variable, and a reference
 count. The purpose of the ref count is so that the block instance is only cleaned up once
 all threads waiting on it have woken up. Or more specifically, so that the last thread to
--- a/vmblock-fuse/fsops.h
+++ b/vmblock-fuse/fsops.h
@@ -45,7 +45,7 @@
 
 #define REDIRECT_DIR_NAME VMBLOCK_CONTROL_MOUNTPOINT
 #define REDIRECT_DIR "/" VMBLOCK_CONTROL_MOUNTPOINT
-#define TARGET_DIR "/tmp/VMwareDnD"
+#define TARGET_DIR "/run/VMwareDnD"
 #define CONTROL_FILE "/" VMBLOCK_DEVICE_NAME
 
 /*
--- a/vmblockmounter/vmblockmounter.c
+++ b/vmblockmounter/vmblockmounter.c
@@ -102,7 +102,7 @@ PrintUsage(FILE *fd)   // IN: File strea
    fprintf(fd, "\n");
    fprintf(fd, "This command is intended to be run from within /bin/mount by\n");
    fprintf(fd, "passing the option '-t %s'. For example:\n", VMBLOCK_FS_NAME);
-   fprintf(fd, "  mount -t %s /tmp/VMwareDnD /var/run/vmblock\n",
+   fprintf(fd, "  mount -t %s /run/VMwareDnD /var/run/vmblock\n",
            VMBLOCK_FS_NAME);
 }
 
